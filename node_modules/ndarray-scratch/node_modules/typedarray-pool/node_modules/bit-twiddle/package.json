{
  "name": "bit-twiddle",
  "version": "1.0.2",
  "description": "Bit twiddling hacks for JavaScript",
  "main": "twiddle.js",
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/bit-twiddle.git"
  },
  "devDependencies": {
    "tape": "^2.12.3"
  },
  "keywords": [
    "bit",
    "twiddle",
    "hacks",
    "graphics",
    "logarithm",
    "exponent",
    "base 2",
    "binary",
    "arithmetic",
    "octree",
    "quadtree",
    "math",
    "nextPow2",
    "log",
    "shift",
    "combination",
    "permutation",
    "trailing",
    "zero",
    "one",
    "interleave",
    "revere",
    "parity",
    "population",
    "count",
    "exponent",
    "power",
    "sign",
    "min",
    "max"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "f0b4adc66dfb632473c57632e87d3a23f3dd2680",
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "bit-twiddle\n===========\n\nThis is a collection of miscellaneous bit twiddling hacks ported to JavaScript, mostly taken from here:\n\n* [Stanford Bit Twiddling Hacks](http://graphics.stanford.edu/~seander/bithacks.html)\n\n[![testling badge](https://ci.testling.com/mikolalysenko/bit-twiddle.png)](https://ci.testling.com/mikolalysenko/bit-twiddle)\n\n[![build status](https://secure.travis-ci.org/mikolalysenko/bit-twiddle.png)](http://travis-ci.org/mikolalysenko/bit-twiddle)\n\nInstall\n=======\nVia npm:\n\n    npm install bit-twiddle\n\n# API\n\n### `sign(v)`\nComputes the sign of the integer v.  Returns:\n* -1 if v < 0\n*  0 if v === 0\n* +1 if v > 0\n\n### `abs(v)`\nReturns the absolute value of the integer v\n\n### `min(x,y)`\nComputes the minimum of integers x and y\n\n### `max(x,y)`\nComputes the maximum of integers x and y\n\n### `isPow2(v)`\nReturns `true` if v is a power of 2, otherwise false.\n\n### `log2(v)`\nReturns an integer approximation of the log-base 2 of v\n\n### `log10(v)`\nReturns log base 10 of v.\n\n### `popCount(v)`\nCounts the number of bits set in v\n\n###  `countTrailingZeros(v)`\nCounts the number of trailing zeros.\n\n### `nextPow2(v)`\nRounds v up to the next power of 2.\n\n### `prevPow2(v)`\nRounds v down to the previous power of 2.\n\n### `parity(v)`\nComputes the parity of the bits in v.\n\n### `reverse(v)`\nReverses the bits of v.\n\n### `interleave2(x,y)`\nInterleaves a pair of 16 bit integers.  Useful for fast quadtree style indexing.  (See wiki: http://en.wikipedia.org/wiki/Z-order_curve )\n\n### `deinterleave2(v, n)`\nDeinterleaves the bits of v, returns the nth part.  If both x and y are 16 bit, then it is true that:\n\n```javascript\ndeinterleave2(interleave2(x,y), 0) === x\ndeinterleave2(interleave2(x,y), 1) === y\n```\n    \n### `interleave3(x,y,z)`\nInterleaves a triple of 10 bit integers.  Useful for fast octree indexing.\n\n### `deinterleave3(v, n)`\nSame deal as `deinterleave2`, only for triples instead of pairs\n\n### `nextCombination(x)`\nReturns next combination ordered colexicographically.\n\nAcknowledgements\n================\nCode is ported from Sean Eron Anderson's public domain bit twiddling hacks page.  http://graphics.stanford.edu/~seander/bithacks.html\nJavaScript implementation (c) 2013 Mikola Lysenko.  MIT License\n",
  "bugs": {
    "url": "https://github.com/mikolalysenko/bit-twiddle/issues"
  },
  "homepage": "https://github.com/mikolalysenko/bit-twiddle",
  "_id": "bit-twiddle@1.0.2",
  "_from": "bit-twiddle@^1.0.0"
}
