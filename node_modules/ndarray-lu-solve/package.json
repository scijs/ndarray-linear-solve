{
  "name": "ndarray-lu-solve",
  "version": "1.0.1",
  "description": "solve a linear system of equations from an LU decomposition",
  "main": "index.js",
  "dependencies": {
    "ndarray": "^1.0.14",
    "ndarray-scratch": "^1.1.0"
  },
  "devDependencies": {
    "tape": "^2.12.1",
    "ndarray-crout-decomposition": "^1.0.0",
    "zeros": "~0.0.0"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/ndarray-lu-solve.git"
  },
  "homepage": "https://github.com/substack/ndarray-lu-solve",
  "keywords": [
    "ndarray",
    "lu",
    "matrix",
    "decomposition",
    "linear",
    "equations",
    "math"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/15",
      "firefox/latest",
      "firefox/nightly",
      "chrome/15",
      "chrome/latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# ndarray-lu-solve\n\nsolve a system of linear equations from an LU decomposition\n\n[![testling badge](https://ci.testling.com/substack/ndarray-lu-solve.png)](https://ci.testling.com/substack/ndarray-lu-solve)\n\n[![build status](https://secure.travis-ci.org/substack/ndarray-lu-solve.png)](http://travis-ci.org/substack/ndarray-lu-solve)\n\n# example\n\n``` js\nvar solve = require('ndarray-lu-solve');\nvar show = require('ndarray-show');\nvar crout = require('ndarray-crout-decomposition');\nvar ndarray = require('ndarray');\nvar zeros = require('zeros');\n\nvar A = ndarray(\n    [ 2, 1, -1, 8, -3, -1, 2, -11, -2, 1, 2, -3 ],\n    [ 4, 3 ], [ 1, 4 ]\n);\nvar L = zeros([ 3, 3 ]);\nvar U = zeros([ 3, 3 ]);\ncrout(A.hi(3,3), L, U);\n\nvar X = ndarray(new Float64Array(3));\nvar Y = ndarray(new Float64Array(3));\nvar solution = solve(L, U, A.lo(3,0).pick(0), X, Y);\n\nconsole.log('input:\\n' + show(A), '\\n');\nconsole.log('solution:\\n' + show(solution));\n```\n\noutput:\n\n```\ninput:\n   2.000    1.000   -1.000    8.000\n  -3.000   -1.000    2.000  -11.000\n  -2.000    1.000    2.000   -3.000 \n\nsolution:\n   2.000    3.000   -1.000\n```\n\n# methods\n\n``` js\nvar solve = require('ndarray-lu-solve')\n```\n\n## var solution = solve(L, U, B, X, Y)\n\nGiven an `L` and `U` ndarrays from a decomposition and a vector `B`, solve the\nsystem `LY = B` for `Y` and `UX = Y` for `X`.\n\nThe `solution` is written to `X` as the computation procedes but is also the\nreturn value.\n\nOptional `X` and `Y` parameters are modified in-place and contain elements of\nthe result. If not given, `X` and `Y` will be allocated.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install ndarray-lu-solve\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/ndarray-lu-solve/issues"
  },
  "_id": "ndarray-lu-solve@1.0.1",
  "dist": {
    "shasum": "28365ecd045dc37d248aa4b950448c5f11d692e4"
  },
  "_from": "ndarray-lu-solve@^1.0.0",
  "_resolved": "https://registry.npmjs.org/ndarray-lu-solve/-/ndarray-lu-solve-1.0.1.tgz"
}
